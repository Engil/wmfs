#!/bin/sh
#
# Do not edit!
# This file was generated from configure.in by BSDBuild 2.8.
#
# To regenerate this file, get the latest BSDBuild release from
# http://hypertriton.com/bsdbuild/, and use the command:
#
#     $ cat configure.in | mkconfigure > configure
#
# Copyright (c) 2001-2010 Hypertriton, Inc. <http://hypertriton.com/>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
PACKAGE="Untitled"
VERSION=""
RELEASE=""

optarg=
for arg
do
	case "$arg" in
	-*=*)
	    optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--build=*)
	    build_arg=$optarg
	    ;;
	--host=*)
	    host_arg=$optarg
	    ;;
	--target=*)
	    target=$optarg
	    ;;
	--byte-order=*)
	    byte_order=$optarg
	    ;;
	--prefix=*)
	    prefix=$optarg
	    ;;
	--exec-prefix=*)
	    exec_prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--bindir=*)
	    bindir=$optarg
	    ;;
	--libdir=*)
	    libdir=$optarg
	    ;;
	--datadir=*)
	    datadir=$optarg
	    ;;
	--sharedir=*)
	    datadir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--mandir=*)
	    mandir=$optarg
	    ;;
	--infodir=*)
	    infodir=$optarg
	    ;;
	--enable-*)
	    option=`echo $arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "enable_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`echo $arg | sed -e 's/--disable-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
	    option=`echo $arg | sed -e 's/--with-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "with_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    option=`echo $arg | sed -e 's/--without-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--help)
	    show_help=yes
	    ;;
	--version)
	    show_version=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	--testdir=*)
	    testdir=$optarg
	    ;;
	--cache=*)
	    cache=$optarg
	    ;;
	--includes=*)
	    includes=$optarg
	    ;;
	--cache-file=*)
	    ;;
	--config-cache | -C)
	    ;;
	*)
	    echo "invalid argument: $arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done
if [ -e "/bin/echo" ]; then
    /bin/echo -n ""
    if [ $? = 0 ]; then
    	ECHO_N="/bin/echo -n"
    else
    	ECHO_N="echo -n"
    fi
else
    ECHO_N="echo -n"
fi
PERL=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}" ]; then
		if [ -e "${path}/perl" ]; then
			PERL="${path}/perl"
			break
		fi
	fi
done
if [ "${prefix}" != "" ]; then
    PREFIX="$prefix"
else
    PREFIX="/usr/local"
fi
if [ "${exec_prefix}" != "" ]; then
    EXEC_PREFIX="$exec_prefix"
else
    EXEC_PREFIX="${PREFIX}"
fi
if [ "${srcdir}" != "" ]; then
	if [ "${PERL}" = "" ]; then
		echo "*"
		echo "* Separate build (--srcdir) requires perl, but there is"
		echo "* no perl interpreter to be found in your PATH."
		echo "*"
		exit 1
	fi
	echo "* Separate build (source in ${srcdir})"
	SRC=${srcdir}
	${PERL} ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
else
	SRC=`pwd`
fi
BLD=`pwd`
SRCDIR="${SRC}"
BLDDIR="${BLD}"

if [ "${testdir}" != "" ]; then
	echo "Configure tests will be executed in ${testdir}"
	if [ ! -e "${testdir}" ]; then
		echo "Creating ${testdir}"
		mkdir ${testdir}
	fi
else
	testdir="."
fi
if [ "${includes}" = "" ]; then
	includes="yes"
fi
case "${includes}" in
yes|no)
	;;
link)
	if [ "${with_proj_generation}" ]; then
		echo "Cannot use --includes=link with --with-proj-generation!"
		exit 1
	fi
	;;
*)
	echo "Usage: --includes [yes|no|link]"
	exit 1
	;;
esac
if [ "${srcdir}" = "" ]; then
	cat << EOT > configure.dep.pl
#!/usr/bin/perl
# Public domain.
# Scan Makefiles for "include .depend" and generate empty ".depend" files,
# such that make can be run prior to an initial "make depend".
#

my %V = ();

sub MakefileIncludesDepend (\$\$)
{
	my \$path = shift;
	my \$cwd = shift;

	if (!open(MF, \$path)) {
		return (0);
	}
	my @lines = ();
	foreach \$_ (<MF>) {
		chop;

		if (/^(.+)\\\\\$/) {			# Expansion
			\$line .= \$1;
		} else {				# New line
			if (\$line) {
				push @lines, \$line . \$_;
				\$line = '';
			} else {
				push @lines, \$_;
			}
		}
	}
	foreach \$_ (@lines) {
		if (/^\\s*#/) { next; }
		if (/^\\t/) { next; }
		s/\\\$\\{(\\w+)\\}/\$V{\$1}/g;
		if (/^\\s*(\\w+)\\s*=\\s*"(.+)"\$/ ||
		    /^\\s*(\\w+)\\s*=\\s*(.+)\$/) {
			\$V{\$1} = \$2;
		} elsif (/^\\s*(\\w+)\\s*\\+=\\s*"(.+)"\$/ ||
		         /^\\s*(\\w+)\\s*\\+=\\s*(.+)\$/) {
			if (exists(\$V{\$1}) && \$V{\$1} ne '') {
				\$V{\$1} .= ' '.\$2;
			} else {
				\$V{\$1} = \$2;
			}
		}
		if (/^\\s*include\\s+(.+)\$/) {
			if (\$1 eq '.depend' ||
			    MakefileIncludesDepend(\$cwd.'/'.\$1, \$cwd)) {
				return (1);
			}
		}
	}
	close(MF);
	return (0);
}

sub Scan (\$)
{
	my \$dir = shift;

	unless (opendir(CWD, \$dir)) {
		print STDERR "\$dir: opendir: \$!; ignoring\\n";
		return;
	}
	%V = ();
	if (-e \$dir.'/Makefile' &&
	    MakefileIncludesDepend("\$dir/Makefile", \$dir)) {
		if (open(OUT, ">\$dir/.depend")) {
			close(OUT);
		} else {
			print STDERR "\$dir/.depend: \$!; ignoring\\n";
		}
	}
	foreach my \$ent (readdir(CWD)) {
		my \$file = \$dir.'/'.\$ent;

		if (\$ent =~ /^\\./) {
			next;
		}
		if (-d \$file) {
			Scan(\$file);
			next;
		}
	}
	closedir(CWD);
}
if (@ARGV < 1) {
	print STDERR "Usage: gen-dotdepend.pl [directory]\\n";
	exit(1);
}
Scan(\$ARGV[0]);
EOT
	if [ "${PERL}" != "" ]; then
		${PERL} configure.dep.pl .
		rm -f configure.dep.pl
	else
		echo "*"
		echo "* Warning: No perl was found. Perl is required for automatic"
		echo "* generation of .depend files. You may need to create empty"
		echo "* .depend files where it is required."
		echo "*"
	fi
fi
if [ "${show_help}" = "yes" ]; then
echo "This configure script was generated by BSDBuild 2.8."
echo "<http://bsdbuild.hypertriton.com/>"
echo ""
echo "Usage: ./configure [options]"
echo ""
echo "Standard build options:"
echo "    --bindir=DIR              Executables (for common users) [PREFIX/bin]"
echo "    --build=STRING            Host environment for build [auto-detect]"
echo "    --cache=DIR               Cache ./configure results in directory [none]"
echo "    --datadir=DIR             Data files (for programs) [PREFIX/share]"
echo "    --enable-nls              Multi-language support [no]"
echo "    --exec-prefix=DIR         Installation base (MD files) [PREFIX]"
echo "    --host=STRING             Cross-compile for target environment [BUILD]"
echo "    --includes=STRING         Preprocess C headers (yes|no|link) [yes]"
echo "    --infodir=DIR             Texinfo documentation [SHAREDIR/info]"
echo "    --libdir=DIR              System libraries [PREFIX/lib]"
echo "    --libexecdir=DIR          Executables (for programs) [PREFIX/libexec]"
echo "    --localedir=DIR           Multi-language support locales [SHAREDIR/locale]"
echo "    --mandir=DIR              Manual page documentation [PREFIX/man]"
echo "    --prefix=DIR              Installation base (MI files) [/usr/local]"
echo "    --sbindir=DIR             Executables (for administrator) [PREFIX/sbin]"
echo "    --srcdir=DIR              Source directory for concurrent build [.]"
echo "    --sysconfdir=DIR          System configuration files [PREFIX/etc]"
echo "    --testdir=DIR             Execute ./configure tests in directory [.]"
echo "    --with-catman             Install cat files for manual pages [auto-detect]"
echo "    --with-ctags              Generate ctags(1) tag files [no]"
echo "    --with-docs               Generate printable documentation [no]"
echo "    --with-gettext            Use gettext for multi-language [auto-detect]"
echo "    --with-libtool            Specify path to libtool [auto-detect]"
echo "    --with-manlinks           Add manual entries for every function [no]"
echo "    --with-manpages           Generate Unix manual pages [yes]"
echo "    --enable-xinerama         Enable xinerama extension [default: yes]"
echo "    --enable-xrandr           Enable xrandr extension [default: yes]"
echo "    --enable-imlib2           Enable imlib2 image support [default: yes]"
echo "    --with-xdg-config-dir     Custom XDG config dir [default: PREFIX/etc/xdg/]"
exit 1
fi;
if [ "${show_version}" = "yes" ]; then
echo "BSDBuild 2.8"
exit 0
fi;
if [ "${srcdir}" != "" ]; then
	build_guessed=`sh ${srcdir}/mk/config.guess`
else
	build_guessed=`sh mk/config.guess`
fi
if [ $? != 0 ]; then
	echo "mk/config.guess failed"
	exit 1
fi
if [ "${build_arg}" != "" ]; then
	build="${build_arg}"
else
	build="${build_guessed}"
fi
if [ "${host_arg}" != "" ]; then
	host="${host_arg}"
else
	host="${build}"
fi
if [ "${host}" != "${build_guessed}" ]; then
	CROSS_COMPILING="yes"
else
	CROSS_COMPILING="no"
fi
echo "BSDBuild 2.8 (host: $host)"

if [ -e "Makefile.config" ]; then
	echo "* Overwriting existing Makefile.config"
fi
echo "# Generated by configure script (BSDBuild 2.8)." > Makefile.config
echo "" >> Makefile.config
echo "BUILD=${build}" >> Makefile.config
echo "HOST=${host}" >> Makefile.config
echo "CROSS_COMPILING=${CROSS_COMPILING}" >> Makefile.config
echo "SRCDIR=${SRC}" >> Makefile.config
echo "BLDDIR=${BLD}" >> Makefile.config

echo "Generated by configure script" > config.log
echo "BSDBuild Version: 2.8" >> config.log
echo "Host: $host" >> config.log

for arg
do
	echo "Argument: $arg" >> config.log
done
if [ -e "config" ]; then
	echo "* Overwriting config directory"
	rm -fR "config"
fi
mkdir -p "config"
if [ $? != 0 ]; then
	echo "Could not create config directory."
	exit 1
fi
HAVE_MANDOC="no"
NROFF=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/nroff" ]; then
		NROFF="${path}/nroff"
	fi
done
if [ "${NROFF}" != "" ]; then
	echo | ${NROFF} -Tmandoc >/dev/null
	if [ "$?" = "0" ]; then
		HAVE_MANDOC="yes"
	fi
fi
if [ "${HAVE_MANDOC}" = "no" ]; then
	if [ "${with_manpages}" = "yes" ]; then
		echo "*"
		echo "* --with-manpages was requested, but either the nroff(1)"
		echo "* utility or the mdoc(7) macro package was not found."
		echo "*"
		exit 1
	fi
	echo "HAVE_MANDOC=no" >> Makefile.config
	echo "NOMAN=yes" >> Makefile.config
	echo "NOMANLINKS=yes" >> Makefile.config
else
	echo "HAVE_MANDOC=yes" >> Makefile.config
	if [ "${with_catman}" = "no" ]; then
		echo "NOCATMAN=yes" >> Makefile.config
	else
		if [ "${with_catman}" = "yes" ]; then
			echo "NOCATMAN=no" >> Makefile.config
		else
			case "${host}" in
			*-*-freebsd*)
				echo "NOCATMAN=yes" >> Makefile.config
				;;
			*)
				echo "NOCATMAN=no" >> Makefile.config
				;;
			esac
		fi
	fi
	if [ "${with_manpages}" = "no" ]; then
		echo "NOMAN=yes" >> Makefile.config
		echo "NOMANLINKS=yes" >> Makefile.config
	else
		if [ "${with_manlinks}" != "yes" ]; then
			echo "NOMANLINKS=yes" >> Makefile.config
		fi
	fi
fi
if [ "${with_docs}" = "no" ]; then
	echo "NODOC=yes" >> Makefile.config
fi
if [ "${enable_nls}" = "yes" ]; then
ENABLE_NLS="yes"
echo "#ifndef ENABLE_NLS" > config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> config/enable_nls.h
echo "#endif" >> config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
msgfmt=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/msgfmt" ]; then
		msgfmt=${path}/msgfmt
	fi
done
if [ "${msgfmt}" != "" ]; then
	HAVE_GETTEXT="yes"
else
	HAVE_GETTEXT="no"
fi
echo "#ifndef ENABLE_NLS" > config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> config/enable_nls.h
echo "#endif" >> config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
else
ENABLE_NLS="no"
HAVE_GETTEXT="no"
echo "#undef ENABLE_NLS" >config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = nil" >>configure.lua
fi;
echo "ENABLE_NLS=$ENABLE_NLS" >>Makefile.config
echo "mdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
CTAGS=""
if [ "${with_ctags}" = "yes" ]; then
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -x "${path}/ectags" ]; then
			CTAGS="${path}/ectags"
		fi
	done
	if [ "${CTAGS}" = "" ]; then
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -x "${path}/ctags" ]; then
				CTAGS="${path}/ctags"
			fi
		done
	fi
fi
echo "CTAGS=${CTAGS}" >> Makefile.config
LIBTOOL_BUNDLED="yes"
LIBTOOL=\${TOP}/mk/libtool/libtool
echo "LIBTOOL=${LIBTOOL}" >> Makefile.config
echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "#ifndef PREFIX" > config/prefix.h
echo "#define PREFIX \"$PREFIX\"" >> config/prefix.h
echo "#endif" >> config/prefix.h
echo "hdefs[\"PREFIX\"] = \"$PREFIX\"" >>configure.lua
if [ "${localedir}" != "" ]; then
	LOCALEDIR="${localedir}"
else
	LOCALEDIR="${SHAREDIR}/locale"
fi
echo "#ifndef LOCALEDIR" > config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> config/localedir.h
echo "#endif" >> config/localedir.h
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
if [ "${mandir}" != "" ]; then
	MANDIR="${mandir}"
else
	MANDIR="${PREFIX}/man"
fi
echo "#ifndef MANDIR" > config/mandir.h
echo "#define MANDIR \"$MANDIR\"" >> config/mandir.h
echo "#endif" >> config/mandir.h
echo "hdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
if [ "${sharedir}" != "" ]; then
	SHAREDIR="${sharedir}"
else
	SHAREDIR="${PREFIX}/share"
fi
echo "#ifndef SHAREDIR" > config/sharedir.h
echo "#define SHAREDIR \"$SHAREDIR\"" >> config/sharedir.h
echo "#endif" >> config/sharedir.h
echo "hdefs[\"SHAREDIR\"] = \"$SHAREDIR\"" >>configure.lua
if [ "${datadir}" != "" ]; then
	DATADIR="${datadir}"
else
	DATADIR="${PREFIX}/share"
fi
echo "#ifndef DATADIR" > config/datadir.h
echo "#define DATADIR \"$DATADIR\"" >> config/datadir.h
echo "#endif" >> config/datadir.h
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
if [ "${libdir}" != "" ]; then
	LIBDIR="${libdir}"
else
	LIBDIR="${PREFIX}/lib"
fi
echo "#ifndef LIBDIR" > config/libdir.h
echo "#define LIBDIR \"$LIBDIR\"" >> config/libdir.h
echo "#endif" >> config/libdir.h
echo "hdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
if [ "${sbindir}" != "" ]; then
	SBINDIR="${sbindir}"
else
	SBINDIR="${PREFIX}/sbin"
fi
echo "#ifndef SBINDIR" > config/sbindir.h
echo "#define SBINDIR \"$SBINDIR\"" >> config/sbindir.h
echo "#endif" >> config/sbindir.h
echo "hdefs[\"SBINDIR\"] = \"$SBINDIR\"" >>configure.lua
if [ "${infodir}" != "" ]; then
	INFODIR="${infodir}"
else
	INFODIR="${SHAREDIR}/info"
fi
echo "#ifndef INFODIR" > config/infodir.h
echo "#define INFODIR \"$INFODIR\"" >> config/infodir.h
echo "#endif" >> config/infodir.h
echo "hdefs[\"INFODIR\"] = \"$INFODIR\"" >>configure.lua
if [ "${sysconfdir}" != "" ]; then
	SYSCONFDIR="${sysconfdir}"
else
	SYSCONFDIR="${PREFIX}/etc"
fi
echo "#ifndef SYSCONFDIR" > config/sysconfdir.h
echo "#define SYSCONFDIR \"$SYSCONFDIR\"" >> config/sysconfdir.h
echo "#endif" >> config/sysconfdir.h
echo "hdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
if [ "${bindir}" != "" ]; then
	BINDIR="${bindir}"
else
	BINDIR="${PREFIX}/bin"
fi
echo "#ifndef BINDIR" > config/bindir.h
echo "#define BINDIR \"$BINDIR\"" >> config/bindir.h
echo "#endif" >> config/bindir.h
echo "hdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
if [ "${libexecdir}" != "" ]; then
	LIBEXECDIR="${libexecdir}"
else
	LIBEXECDIR="${PREFIX}/libexec"
fi
echo "#ifndef LIBEXECDIR" > config/libexecdir.h
echo "#define LIBEXECDIR \"$LIBEXECDIR\"" >> config/libexecdir.h
echo "#endif" >> config/libexecdir.h
echo "hdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
if [ "${localstatedir}" != "" ]; then
	LOCALSTATEDIR="${localstatedir}"
else
	LOCALSTATEDIR="${PREFIX}/var"
fi
echo "#ifndef LOCALSTATEDIR" > config/localstatedir.h
echo "#define LOCALSTATEDIR \"$LOCALSTATEDIR\"" >> config/localstatedir.h
echo "#endif" >> config/localstatedir.h
echo "hdefs[\"LOCALSTATEDIR\"] = \"$LOCALSTATEDIR\"" >>configure.lua
$ECHO_N "checking for a C compiler..."
$ECHO_N "checking for a C compiler..." >> config.log
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/cc" ]; then
			if [ -f "${i}/cc" ]; then
				CC="${i}/cc"
				break
			fi
		elif [ -x "${i}/gcc" ]; then
			if [ -f "${i}/gcc" ]; then
				CC="${i}/gcc"
				break
			fi
		fi
	done
	if [ "$CC" = "" ]; then
		echo "*"
		echo "* Unable to find a standard C compiler in PATH. You may need"
		echo "* to set the CC environment variable."
		echo "*"
		echo "Unable to find a C compiler in PATH." >> config.log
		HAVE_CC="no"
		echo "no"
	else
		HAVE_CC="yes"
		echo "yes, ${CC}"
		echo "yes, ${CC}" >> config.log
	fi
else
	HAVE_CC="yes"
	echo "using ${CC}"
fi

if [ "${HAVE_CC}" = "yes" ]; then
	$ECHO_N "checking whether the C compiler works..."
	$ECHO_N "checking whether the C compiler works..." >> config.log
	cat << 'EOT' > conftest.c
int main(int argc, char *argv[]) { return (0); }
EOT
	$CC -o conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
	    echo "no, the test failed to compile"
	    echo "no, the test failed to compile" >> config.log
		HAVE_CC="no"
	else
		echo "yes"
		echo "yes" >> config.log
		HAVE_CC="yes"
	fi

	if [ "${EXECSUFFIX}" = "" ]; then
		EXECSUFFIX=""
		for OUTFILE in conftest.exe conftest conftest.*; do
			if [ -f $OUTFILE ]; then
				case $OUTFILE in
				*.c | *.o | *.obj | *.bb | *.bbg | *.d | *.pdb | *.tds | *.xcoff | *.dSYM | *.xSYM )
					;;
				*.* )
					EXECSUFFIX=`expr "$OUTFILE" : '[^.]*\(\..*\)'`
					break ;;
				* )
					break ;;
				esac;
		    fi
		done
		if [ "$EXECSUFFIX" != "" ]; then
			echo "Detected executable suffix: $EXECSUFFIX" >> config.log
		fi
echo "EXECSUFFIX=$EXECSUFFIX" >>Makefile.config
echo "mdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
echo "#ifndef EXECSUFFIX" > config/execsuffix.h
echo "#define EXECSUFFIX \"$EXECSUFFIX\"" >> config/execsuffix.h
echo "#endif" >> config/execsuffix.h
echo "hdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
	fi
	rm -f conftest.c conftest$EXECSUFFIX
	TEST_CFLAGS=""
fi
$ECHO_N "checking for compiler warning options..."
$ECHO_N "checking for compiler warning options..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CC_WARNINGS" ]; then
		HAVE_CC_WARNINGS=`cat ${cache}/ctest-HAVE_CC_WARNINGS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CC_WARNINGS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CC_WARNINGS="yes"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "#ifndef HAVE_CC_WARNINGS" > config/have_cc_warnings.h
echo "#define HAVE_CC_WARNINGS \"$HAVE_CC_WARNINGS\"" >> config/have_cc_warnings.h
echo "#endif" >> config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CC_WARNINGS="no"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "#undef HAVE_CC_WARNINGS" >config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CC_WARNINGS" > ${cache}/ctest-HAVE_CC_WARNINGS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CC_WARNINGS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall -Werror"
fi;
$ECHO_N "checking for gcc..."
$ECHO_N "checking for gcc..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GCC" ]; then
		HAVE_GCC=`cat ${cache}/ctest-HAVE_GCC`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GCC`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[]) {
#if !defined(__GNUC__)
# error "Not GCC"
#endif
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GCC="yes"
echo "HAVE_GCC=$HAVE_GCC" >>Makefile.config
echo "mdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
echo "#ifndef HAVE_GCC" > config/have_gcc.h
echo "#define HAVE_GCC \"$HAVE_GCC\"" >> config/have_gcc.h
echo "#endif" >> config/have_gcc.h
echo "hdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GCC="no"
echo "HAVE_GCC=$HAVE_GCC" >>Makefile.config
echo "mdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
echo "#undef HAVE_GCC" >config/have_gcc.h
echo "hdefs[\"HAVE_GCC\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GCC" > ${cache}/ctest-HAVE_GCC
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GCC
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for IEEE754 floating point..."
$ECHO_N "checking for IEEE754 floating point..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_IEEE754" ]; then
		HAVE_IEEE754=`cat ${cache}/ctest-HAVE_IEEE754`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_IEEE754`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	float f = 1.5;
	double d = 2.5;
	f = 0;
	d = 0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_IEEE754="yes"
echo "HAVE_IEEE754=$HAVE_IEEE754" >>Makefile.config
echo "mdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
echo "#ifndef HAVE_IEEE754" > config/have_ieee754.h
echo "#define HAVE_IEEE754 \"$HAVE_IEEE754\"" >> config/have_ieee754.h
echo "#endif" >> config/have_ieee754.h
echo "hdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_IEEE754="no"
echo "HAVE_IEEE754=$HAVE_IEEE754" >>Makefile.config
echo "mdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
echo "#undef HAVE_IEEE754" >config/have_ieee754.h
echo "hdefs[\"HAVE_IEEE754\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_IEEE754" > ${cache}/ctest-HAVE_IEEE754
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_IEEE754
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking aligned attribute..."
$ECHO_N "checking aligned attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE" ]; then
		HAVE_ALIGNED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_ALIGNED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { int x,y,z; } __attribute__ ((aligned(16)));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ALIGNED_ATTRIBUTE="yes"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_ALIGNED_ATTRIBUTE" > config/have_aligned_attribute.h
echo "#define HAVE_ALIGNED_ATTRIBUTE \"$HAVE_ALIGNED_ATTRIBUTE\"" >> config/have_aligned_attribute.h
echo "#endif" >> config/have_aligned_attribute.h
echo "hdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_ALIGNED_ATTRIBUTE="no"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_ALIGNED_ATTRIBUTE" >config/have_aligned_attribute.h
echo "hdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_ALIGNED_ATTRIBUTE" > ${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_ALIGNED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking bounded attribute..."
$ECHO_N "checking bounded attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE" ]; then
		HAVE_BOUNDED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_BOUNDED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(char *, int) __attribute__ ((__bounded__(__string__,1,2)));
void foo(char *a, int c) { }
int main(int argc, char *argv[])
{
	char buf[32];
	foo(buf, sizeof(buf));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_BOUNDED_ATTRIBUTE="yes"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_BOUNDED_ATTRIBUTE" > config/have_bounded_attribute.h
echo "#define HAVE_BOUNDED_ATTRIBUTE \"$HAVE_BOUNDED_ATTRIBUTE\"" >> config/have_bounded_attribute.h
echo "#endif" >> config/have_bounded_attribute.h
echo "hdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_BOUNDED_ATTRIBUTE="no"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_BOUNDED_ATTRIBUTE" >config/have_bounded_attribute.h
echo "hdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_BOUNDED_ATTRIBUTE" > ${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_BOUNDED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking const attribute..."
$ECHO_N "checking const attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CONST_ATTRIBUTE" ]; then
		HAVE_CONST_ATTRIBUTE=`cat ${cache}/ctest-HAVE_CONST_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CONST_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(int) __attribute__ ((const));
int foo(int x) { return (x*x); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	return (x);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CONST_ATTRIBUTE="yes"
echo "HAVE_CONST_ATTRIBUTE=$HAVE_CONST_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_CONST_ATTRIBUTE" > config/have_const_attribute.h
echo "#define HAVE_CONST_ATTRIBUTE \"$HAVE_CONST_ATTRIBUTE\"" >> config/have_const_attribute.h
echo "#endif" >> config/have_const_attribute.h
echo "hdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CONST_ATTRIBUTE="no"
echo "HAVE_CONST_ATTRIBUTE=$HAVE_CONST_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_CONST_ATTRIBUTE" >config/have_const_attribute.h
echo "hdefs[\"HAVE_CONST_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CONST_ATTRIBUTE" > ${cache}/ctest-HAVE_CONST_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CONST_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking deprecated attribute..."
$ECHO_N "checking deprecated attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE" ]; then
		HAVE_DEPRECATED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DEPRECATED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(void) __attribute__ ((deprecated));
void foo(void) { }

int main(int argc, char *argv[])
{
/*	foo(); */
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DEPRECATED_ATTRIBUTE="yes"
echo "HAVE_DEPRECATED_ATTRIBUTE=$HAVE_DEPRECATED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_DEPRECATED_ATTRIBUTE" > config/have_deprecated_attribute.h
echo "#define HAVE_DEPRECATED_ATTRIBUTE \"$HAVE_DEPRECATED_ATTRIBUTE\"" >> config/have_deprecated_attribute.h
echo "#endif" >> config/have_deprecated_attribute.h
echo "hdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DEPRECATED_ATTRIBUTE="no"
echo "HAVE_DEPRECATED_ATTRIBUTE=$HAVE_DEPRECATED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_DEPRECATED_ATTRIBUTE" >config/have_deprecated_attribute.h
echo "hdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DEPRECATED_ATTRIBUTE" > ${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DEPRECATED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking format attribute..."
$ECHO_N "checking format attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_FORMAT_ATTRIBUTE" ]; then
		HAVE_FORMAT_ATTRIBUTE=`cat ${cache}/ctest-HAVE_FORMAT_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_FORMAT_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdarg.h>
void foo1(char *, ...)
     __attribute__((__format__ (printf, 1, 2)));
void foo2(char *, ...)
     __attribute__((__format__ (__printf__, 1, 2)))
     __attribute__((__nonnull__ (1)));
void foo1(char *a, ...) {}
void foo2(char *a, ...) {}
int main(int argc, char *argv[])
{
	foo1("foo %s", "bar");
	foo2("foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_FORMAT_ATTRIBUTE="yes"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_FORMAT_ATTRIBUTE" > config/have_format_attribute.h
echo "#define HAVE_FORMAT_ATTRIBUTE \"$HAVE_FORMAT_ATTRIBUTE\"" >> config/have_format_attribute.h
echo "#endif" >> config/have_format_attribute.h
echo "hdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_FORMAT_ATTRIBUTE="no"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_FORMAT_ATTRIBUTE" >config/have_format_attribute.h
echo "hdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_FORMAT_ATTRIBUTE" > ${cache}/ctest-HAVE_FORMAT_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_FORMAT_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking nonnull attribute..."
$ECHO_N "checking nonnull attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_NONNULL_ATTRIBUTE" ]; then
		HAVE_NONNULL_ATTRIBUTE=`cat ${cache}/ctest-HAVE_NONNULL_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_NONNULL_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(char *) __attribute__((__nonnull__ (1)));
void foo(char *a) { }
int main(int argc, char *argv[])
{
	foo("foo");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_NONNULL_ATTRIBUTE="yes"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_NONNULL_ATTRIBUTE" > config/have_nonnull_attribute.h
echo "#define HAVE_NONNULL_ATTRIBUTE \"$HAVE_NONNULL_ATTRIBUTE\"" >> config/have_nonnull_attribute.h
echo "#endif" >> config/have_nonnull_attribute.h
echo "hdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_NONNULL_ATTRIBUTE="no"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_NONNULL_ATTRIBUTE" >config/have_nonnull_attribute.h
echo "hdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_NONNULL_ATTRIBUTE" > ${cache}/ctest-HAVE_NONNULL_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_NONNULL_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking noreturn attribute..."
$ECHO_N "checking noreturn attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_NORETURN_ATTRIBUTE" ]; then
		HAVE_NORETURN_ATTRIBUTE=`cat ${cache}/ctest-HAVE_NORETURN_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_NORETURN_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <unistd.h>
#include <stdlib.h>
void foo(void) __attribute__ ((noreturn));
void foo(void) { _exit(0); }
int main(int argc, char *argv[])
{
	foo();
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_NORETURN_ATTRIBUTE="yes"
echo "HAVE_NORETURN_ATTRIBUTE=$HAVE_NORETURN_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_NORETURN_ATTRIBUTE" > config/have_noreturn_attribute.h
echo "#define HAVE_NORETURN_ATTRIBUTE \"$HAVE_NORETURN_ATTRIBUTE\"" >> config/have_noreturn_attribute.h
echo "#endif" >> config/have_noreturn_attribute.h
echo "hdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_NORETURN_ATTRIBUTE="no"
echo "HAVE_NORETURN_ATTRIBUTE=$HAVE_NORETURN_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_NORETURN_ATTRIBUTE" >config/have_noreturn_attribute.h
echo "hdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_NORETURN_ATTRIBUTE" > ${cache}/ctest-HAVE_NORETURN_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_NORETURN_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking packed attribute..."
$ECHO_N "checking packed attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PACKED_ATTRIBUTE" ]; then
		HAVE_PACKED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_PACKED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PACKED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { char c; int x,y,z; } __attribute__ ((packed));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PACKED_ATTRIBUTE="yes"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_PACKED_ATTRIBUTE" > config/have_packed_attribute.h
echo "#define HAVE_PACKED_ATTRIBUTE \"$HAVE_PACKED_ATTRIBUTE\"" >> config/have_packed_attribute.h
echo "#endif" >> config/have_packed_attribute.h
echo "hdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PACKED_ATTRIBUTE="no"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_PACKED_ATTRIBUTE" >config/have_packed_attribute.h
echo "hdefs[\"HAVE_PACKED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PACKED_ATTRIBUTE" > ${cache}/ctest-HAVE_PACKED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PACKED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking pure attribute..."
$ECHO_N "checking pure attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PURE_ATTRIBUTE" ]; then
		HAVE_PURE_ATTRIBUTE=`cat ${cache}/ctest-HAVE_PURE_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PURE_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(int) __attribute__ ((pure));
int foo(int x) { return (x*x); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	return (x);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PURE_ATTRIBUTE="yes"
echo "HAVE_PURE_ATTRIBUTE=$HAVE_PURE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_PURE_ATTRIBUTE" > config/have_pure_attribute.h
echo "#define HAVE_PURE_ATTRIBUTE \"$HAVE_PURE_ATTRIBUTE\"" >> config/have_pure_attribute.h
echo "#endif" >> config/have_pure_attribute.h
echo "hdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PURE_ATTRIBUTE="no"
echo "HAVE_PURE_ATTRIBUTE=$HAVE_PURE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_PURE_ATTRIBUTE" >config/have_pure_attribute.h
echo "hdefs[\"HAVE_PURE_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PURE_ATTRIBUTE" > ${cache}/ctest-HAVE_PURE_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PURE_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking warn_unused_result attribute..."
$ECHO_N "checking warn_unused_result attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" ]; then
		HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=`cat ${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(void) __attribute__ ((warn_unused_result));
int foo(void) { return (1); }
int main(int argc, char *argv[])
{
	int rv = foo();
	return (rv);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE="yes"
echo "HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" > config/have_warn_unused_result_attribute.h
echo "#define HAVE_WARN_UNUSED_RESULT_ATTRIBUTE \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >> config/have_warn_unused_result_attribute.h
echo "#endif" >> config/have_warn_unused_result_attribute.h
echo "hdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE="no"
echo "HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >config/have_warn_unused_result_attribute.h
echo "hdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" > ${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking for long double..."
$ECHO_N "checking for long double..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_LONG_DOUBLE" ]; then
		HAVE_LONG_DOUBLE=`cat ${cache}/ctest-HAVE_LONG_DOUBLE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_LONG_DOUBLE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	ld = 0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_DOUBLE="yes"
echo "#ifndef HAVE_LONG_DOUBLE" > config/have_long_double.h
echo "#define HAVE_LONG_DOUBLE \"$HAVE_LONG_DOUBLE\"" >> config/have_long_double.h
echo "#endif" >> config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = \"$HAVE_LONG_DOUBLE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_DOUBLE="no"
echo "#undef HAVE_LONG_DOUBLE" >config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_LONG_DOUBLE" > ${cache}/ctest-HAVE_LONG_DOUBLE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_LONG_DOUBLE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for long long..."
$ECHO_N "checking for long long..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_LONG_LONG" ]; then
		HAVE_LONG_LONG=`cat ${cache}/ctest-HAVE_LONG_LONG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_LONG_LONG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long long ll = 0.0;
	unsigned long long ull = 0.0;
	ll = 1.0;
	ull = 1.0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_LONG="yes"
echo "#ifndef HAVE_LONG_LONG" > config/have_long_long.h
echo "#define HAVE_LONG_LONG \"$HAVE_LONG_LONG\"" >> config/have_long_long.h
echo "#endif" >> config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = \"$HAVE_LONG_LONG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_LONG="no"
echo "#undef HAVE_LONG_LONG" >config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_LONG_LONG" > ${cache}/ctest-HAVE_LONG_LONG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_LONG_LONG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for cygwin environment..."
$ECHO_N "checking for cygwin environment..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CYGWIN" ]; then
		HAVE_CYGWIN=`cat ${cache}/ctest-HAVE_CYGWIN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CYGWIN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CYGWIN="yes"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "#ifndef HAVE_CYGWIN" > config/have_cygwin.h
echo "#define HAVE_CYGWIN \"$HAVE_CYGWIN\"" >> config/have_cygwin.h
echo "#endif" >> config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CYGWIN="no"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "#undef HAVE_CYGWIN" >config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CYGWIN" > ${cache}/ctest-HAVE_CYGWIN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CYGWIN
fi
rm -f conftest.c $testdir/conftest
echo "CC=$CC" >>Makefile.config
echo "mdefs[\"CC\"] = \"$CC\"" >>configure.lua
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
$ECHO_N "checking for the X window system..."
$ECHO_N "checking for the X window system..." >> config.log
X11_CFLAGS=""
X11_LIBS=""
if [ "" != "" ]; then
if [ -e  "/include/X11" ]; then
X11_CFLAGS="-I/include"
fi;
if [ -e  "/lib" ]; then
X11_LIBS="-L/lib"
fi;
else
if [ -e  "/usr/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/include/X11"
fi;
if [ -e  "/usr/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R6"
fi;
if [ -e  "/usr/local/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11/include"
fi;
if [ -e  "/usr/local/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R6/include"
fi;
if [ -e  "/usr/local/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11"
fi;
if [ -e  "/usr/local/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R6"
fi;
if [ -e  "/usr/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/X11/include"
fi;
if [ -e  "/usr/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R6/include"
fi;
if [ -e  "/usr/local/X11/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/local/X11/lib"
fi;
if [ -e  "/usr/local/X11R6/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/local/X11R6/lib"
fi;
if [ -e  "/usr/X11/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/X11/lib"
fi;
if [ -e  "/usr/X11R6/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/X11R6/lib"
fi;
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_X11" ]; then
		HAVE_X11=`cat ${cache}/ctest-HAVE_X11`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_X11`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <X11/Xlib.h>
int main(int argc, char *argv[])
{
	Display *disp;
	disp = XOpenDisplay(NULL);
	XCloseDisplay(disp);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest conftest.c ${X11_LIBS} -lX11" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest conftest.c ${X11_LIBS} -lX11 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_X11="yes"
echo "HAVE_X11=$HAVE_X11" >>Makefile.config
echo "mdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
echo "#ifndef HAVE_X11" > config/have_x11.h
echo "#define HAVE_X11 \"$HAVE_X11\"" >> config/have_x11.h
echo "#endif" >> config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_X11="no"
echo "HAVE_X11=$HAVE_X11" >>Makefile.config
echo "mdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
echo "#undef HAVE_X11" >config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_X11" > ${cache}/ctest-HAVE_X11
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_X11
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_X11}" = "yes" ]; then
echo "X11_CFLAGS=$X11_CFLAGS" >>Makefile.config
echo "mdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
echo "#ifndef X11_CFLAGS" > config/x11_cflags.h
echo "#define X11_CFLAGS \"$X11_CFLAGS\"" >> config/x11_cflags.h
echo "#endif" >> config/x11_cflags.h
echo "hdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
echo "X11_LIBS=$X11_LIBS" >>Makefile.config
echo "mdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
echo "#ifndef X11_LIBS" > config/x11_libs.h
echo "#define X11_LIBS \"$X11_LIBS\"" >> config/x11_libs.h
echo "#endif" >> config/x11_libs.h
echo "hdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
else
echo "#undef X11_CFLAGS" >config/x11_cflags.h
echo "hdefs[\"X11_CFLAGS\"] = nil" >>configure.lua
X11_CFLAGS=""
echo "#undef X11_LIBS" >config/x11_libs.h
echo "hdefs[\"X11_LIBS\"] = nil" >>configure.lua
X11_LIBS=""
fi;
$ECHO_N "checking for X11 xft extension..."
$ECHO_N "checking for X11 xft extension..." >> config.log
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xft`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xft is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xft prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XFT_VERSION=`pkg-config xft --modversion`
	fi
else
	XFT_VERSION=`pkg-config xft --modversion`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xft`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xft is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xft prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XFT_CFLAGS=`pkg-config xft --cflags`
	fi
else
	XFT_CFLAGS=`pkg-config xft --cflags`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xft`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xft is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xft prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XFT_LIBS=`pkg-config xft --libs`
	fi
else
	XFT_LIBS=`pkg-config xft --libs`
fi
if [ "${XFT_VERSION}" != "" ]; then
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_XFT" ]; then
		HAVE_XFT=`cat ${cache}/ctest-HAVE_XFT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_XFT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>
#include <stdio.h>
#include <X11/Xft/Xft.h>

int
main(int argc, char *argv[])
{
	XftFontOpenName(NULL, 0, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${XFT_CFLAGS} -o $testdir/conftest conftest.c ${XFT_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${XFT_CFLAGS} -o $testdir/conftest conftest.c ${XFT_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_XFT="yes"
echo "HAVE_XFT=$HAVE_XFT" >>Makefile.config
echo "mdefs[\"HAVE_XFT\"] = \"$HAVE_XFT\"" >>configure.lua
echo "#ifndef HAVE_XFT" > config/have_xft.h
echo "#define HAVE_XFT \"$HAVE_XFT\"" >> config/have_xft.h
echo "#endif" >> config/have_xft.h
echo "hdefs[\"HAVE_XFT\"] = \"$HAVE_XFT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_XFT="no"
echo "HAVE_XFT=$HAVE_XFT" >>Makefile.config
echo "mdefs[\"HAVE_XFT\"] = \"$HAVE_XFT\"" >>configure.lua
echo "#undef HAVE_XFT" >config/have_xft.h
echo "hdefs[\"HAVE_XFT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_XFT" > ${cache}/ctest-HAVE_XFT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_XFT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_XFT}" = "yes" ]; then
echo "XFT_CFLAGS=$XFT_CFLAGS" >>Makefile.config
echo "mdefs[\"XFT_CFLAGS\"] = \"$XFT_CFLAGS\"" >>configure.lua
echo "#ifndef XFT_CFLAGS" > config/xft_cflags.h
echo "#define XFT_CFLAGS \"$XFT_CFLAGS\"" >> config/xft_cflags.h
echo "#endif" >> config/xft_cflags.h
echo "hdefs[\"XFT_CFLAGS\"] = \"$XFT_CFLAGS\"" >>configure.lua
echo "XFT_LIBS=$XFT_LIBS" >>Makefile.config
echo "mdefs[\"XFT_LIBS\"] = \"$XFT_LIBS\"" >>configure.lua
echo "#ifndef XFT_LIBS" > config/xft_libs.h
echo "#define XFT_LIBS \"$XFT_LIBS\"" >> config/xft_libs.h
echo "#endif" >> config/xft_libs.h
echo "hdefs[\"XFT_LIBS\"] = \"$XFT_LIBS\"" >>configure.lua
else
echo "#undef XFT_CFLAGS" >config/xft_cflags.h
echo "hdefs[\"XFT_CFLAGS\"] = nil" >>configure.lua
XFT_CFLAGS=""
echo "#undef XFT_LIBS" >config/xft_libs.h
echo "hdefs[\"XFT_LIBS\"] = nil" >>configure.lua
XFT_LIBS=""
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_XFT" >config/have_xft.h
echo "hdefs[\"HAVE_XFT\"] = nil" >>configure.lua
fi;
$ECHO_N "checking for FreeType (http://www.freetype.org)..."
$ECHO_N "checking for FreeType (http://www.freetype.org)..." >> config.log
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/freetype-config" ]; then
		FREETYPE_VERSION=`/bin/freetype-config --version`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_VERSION" ]; then
			FREETYPE_VERSION=`cat ${cache}/exec-FREETYPE_VERSION`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_VERSION`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_VERSION=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_VERSION=`${path}/freetype-config --version`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_VERSION" > ${cache}/exec-FREETYPE_VERSION
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_VERSION
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/freetype-config" ]; then
		FREETYPE_CFLAGS=`/bin/freetype-config --cflags`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_CFLAGS" ]; then
			FREETYPE_CFLAGS=`cat ${cache}/exec-FREETYPE_CFLAGS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_CFLAGS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_CFLAGS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_CFLAGS=`${path}/freetype-config --cflags`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_CFLAGS" > ${cache}/exec-FREETYPE_CFLAGS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_CFLAGS
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/freetype-config" ]; then
		FREETYPE_LIBS=`/bin/freetype-config --libs`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_LIBS" ]; then
			FREETYPE_LIBS=`cat ${cache}/exec-FREETYPE_LIBS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_LIBS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_LIBS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_LIBS=`${path}/freetype-config --libs`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_LIBS" > ${cache}/exec-FREETYPE_LIBS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_LIBS
		fi
	fi
fi
case "${host}" in
*-*-irix*)
if [ -e  "/usr/freeware/include" ]; then
FREETYPE_CFLAGS="${FREETYPE_CFLAGS} -I/usr/freeware/include"
fi;
;;
esac
if [ "${FREETYPE_VERSION}" != "" ]; then
if [ "" != "" ]; then
echo "yes ($FREETYPE_VERSION in )"
echo "yes ($FREETYPE_VERSION in )" >> config.log
else
echo "yes ($FREETYPE_VERSION)"
echo "yes ($FREETYPE_VERSION)" >> config.log
fi;
if [ "" != "" ]; then
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "Version  or greater is required (found $FREETYPE_VERSION)"
exit 1
fi;
fi;
$ECHO_N "checking whether FreeType works..."
$ECHO_N "checking whether FreeType works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_FREETYPE" ]; then
		HAVE_FREETYPE=`cat ${cache}/ctest-HAVE_FREETYPE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_FREETYPE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_OUTLINE_H
int
main(int argc, char *argv[])
{
	FT_Library library;
	FT_Face face;
	FT_Init_FreeType(&library);
	FT_New_Face(library, "foo", 0, &face);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest conftest.c ${FREETYPE_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest conftest.c ${FREETYPE_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_FREETYPE="yes"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >>Makefile.config
echo "mdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
echo "#ifndef HAVE_FREETYPE" > config/have_freetype.h
echo "#define HAVE_FREETYPE \"$HAVE_FREETYPE\"" >> config/have_freetype.h
echo "#endif" >> config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_FREETYPE="no"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >>Makefile.config
echo "mdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
echo "#undef HAVE_FREETYPE" >config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_FREETYPE" > ${cache}/ctest-HAVE_FREETYPE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_FREETYPE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_FREETYPE}" = "yes" ]; then
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >>Makefile.config
echo "mdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
echo "#ifndef FREETYPE_CFLAGS" > config/freetype_cflags.h
echo "#define FREETYPE_CFLAGS \"$FREETYPE_CFLAGS\"" >> config/freetype_cflags.h
echo "#endif" >> config/freetype_cflags.h
echo "hdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >>Makefile.config
echo "mdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
echo "#ifndef FREETYPE_LIBS" > config/freetype_libs.h
echo "#define FREETYPE_LIBS \"$FREETYPE_LIBS\"" >> config/freetype_libs.h
echo "#endif" >> config/freetype_libs.h
echo "hdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
else
echo "#undef FREETYPE_CFLAGS" >config/freetype_cflags.h
echo "hdefs[\"FREETYPE_CFLAGS\"] = nil" >>configure.lua
FREETYPE_CFLAGS=""
echo "#undef FREETYPE_LIBS" >config/freetype_libs.h
echo "hdefs[\"FREETYPE_LIBS\"] = nil" >>configure.lua
FREETYPE_LIBS=""
fi;
else
if [ "" != "" ]; then
echo "no (not in )"
echo "no (not in )" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
echo "#undef HAVE_FREETYPE" >config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
fi;
$ECHO_N "checking for POSIX threads..."
$ECHO_N "checking for POSIX threads..." >> config.log
if [ "" != "" ]; then
PTHREADS_CFLAGS="-I/include"
PTHREADS_LIBS="-L/lib -lpthread"
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS="-lpthread"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
$ECHO_N "checking for -pthread..."
$ECHO_N "checking for -pthread..." >> config.log
PTHREADS_LIBS="-pthread"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS=""
$ECHO_N "checking for -pthread (common paths)..."
$ECHO_N "checking for -pthread (common paths)..." >> config.log
if [ -e  "/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I/lib"
fi;
if [ -e  "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi;
if [ -e  "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi;
if [ -e  "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi;
if [ -e  "/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L/lib -lpthread"
fi;
if [ -e  "/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC1"
fi;
if [ -e  "/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC1d"
fi;
if [ -e  "/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE1"
fi;
if [ -e  "/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE1d"
fi;
if [ -e  "/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC2"
fi;
if [ -e  "/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC2d"
fi;
if [ -e  "/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE2"
fi;
if [ -e  "/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE2d"
fi;
if [ -e  "/usr/local/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthread"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
fi;
fi;
fi;
$ECHO_N "checking for the X/Open Threads Extension..."
$ECHO_N "checking for the X/Open Threads Extension..." >> config.log
case "${host}" in
*-*-freebsd*)
PTHREADS_XOPEN_CFLAGS=""
;;
*)
PTHREADS_XOPEN_CFLAGS="-U_XOPEN_SOURCE -D_XOPEN_SOURCE=600"
;;
esac
if [ "" != "" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthread"
else
PTHREADS_XOPEN_LIBS="-lpthread"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS_XOPEN" ]; then
		HAVE_PTHREADS_XOPEN=`cat ${cache}/ctest-HAVE_PTHREADS_XOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS_XOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS_XOPEN="yes"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS_XOPEN="no"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#undef HAVE_PTHREADS_XOPEN" >config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS_XOPEN" > ${cache}/ctest-HAVE_PTHREADS_XOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS_XOPEN
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_CFLAGS" > config/pthreads_xopen_cflags.h
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >> config/pthreads_xopen_cflags.h
echo "#endif" >> config/pthreads_xopen_cflags.h
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_LIBS" > config/pthreads_xopen_libs.h
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >> config/pthreads_xopen_libs.h
echo "#endif" >> config/pthreads_xopen_libs.h
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
PTHREADS_XOPEN_LIBS=""
$ECHO_N "checking for the X/Open Threads Extension (common paths)..."
$ECHO_N "checking for the X/Open Threads Extension (common paths)..." >> config.log
if [ -e  "/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthread"
fi;
if [ -e  "/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC1"
fi;
if [ -e  "/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC1d"
fi;
if [ -e  "/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE1"
fi;
if [ -e  "/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE1d"
fi;
if [ -e  "/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC2"
fi;
if [ -e  "/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC2d"
fi;
if [ -e  "/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE2"
fi;
if [ -e  "/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE2d"
fi;
if [ -e  "/usr/local/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthread"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi;
if [ -e  "/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I/lib"
fi;
if [ -e  "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi;
if [ -e  "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi;
if [ -e  "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS_XOPEN" ]; then
		HAVE_PTHREADS_XOPEN=`cat ${cache}/ctest-HAVE_PTHREADS_XOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS_XOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS_XOPEN="yes"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS_XOPEN="no"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#undef HAVE_PTHREADS_XOPEN" >config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS_XOPEN" > ${cache}/ctest-HAVE_PTHREADS_XOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS_XOPEN
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_CFLAGS" > config/pthreads_xopen_cflags.h
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >> config/pthreads_xopen_cflags.h
echo "#endif" >> config/pthreads_xopen_cflags.h
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_LIBS" > config/pthreads_xopen_libs.h
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >> config/pthreads_xopen_libs.h
echo "#endif" >> config/pthreads_xopen_libs.h
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
echo "#undef HAVE_PTHREADS_XOPEN" >config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
fi;
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE..."
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE" ]; then
		HAVE_PTHREAD_MUTEX_RECURSIVE=`cat ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" >config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREAD_MUTEX_RECURSIVE" > ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" >config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = nil" >>configure.lua
fi;
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE_NP..."
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE_NP..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP" ]; then
		HAVE_PTHREAD_MUTEX_RECURSIVE_NP=`cat ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE_NP`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE_NP);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE_NP
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = nil" >>configure.lua
fi;
if [ "${HAVE_CC}" = "no" ]
 then
	echo "Error: you need a C compiler to build wmfs" 1>&2
	exit 1
fi
if [ "${HAVE_X11}" = "no" ]
 then
	echo "Error: you need x11 libraries to build wmfs" 1>&2
	exit 1
fi
if [ "${HAVE_XFT}" = "no" ]
 then
	echo "Error: you need x11 xft extension library to build wmfs" 1>&2
	exit 1
fi
if [ "${HAVE_FREETYPE}" = "no" ]
 then
	echo "Error: you need freetype library to build wmfs" 1>&2
	exit 1
fi
if [ "${HAVE_PTHREADS}" = "no" ]
 then
	echo "Error: you need posix-threads to run wmfs" 1>&2
	exit 1
fi
if [ -n "${with_xdg_config_dir}" ]
 then
	XDG_CONFIG_DIR="${with_xdg_config_dir}"
else
	XDG_CONFIG_DIR='${PREFIX}/etc/xdg'
fi
XDG_CONFIG_DIR="${XDG_CONFIG_DIR}"
echo "XDG_CONFIG_DIR=$XDG_CONFIG_DIR" >>Makefile.config
echo "mdefs[\"XDG_CONFIG_DIR\"] = \"$XDG_CONFIG_DIR\"" >>configure.lua
if [ "${enable_xinerama}" != "no" ]
 then
$ECHO_N "checking for X11 Xinerama library..."
$ECHO_N "checking for X11 Xinerama library..." >> config.log
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xinerama`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xinerama prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XINERAMA_VERSION=`pkg-config xinerama --modversion`
	fi
else
	XINERAMA_VERSION=`pkg-config xinerama --modversion`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xinerama`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xinerama prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XINERAMA_CFLAGS=`pkg-config xinerama --cflags`
	fi
else
	XINERAMA_CFLAGS=`pkg-config xinerama --cflags`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xinerama`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xinerama prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XINERAMA_LIBS=`pkg-config xinerama --libs`
	fi
else
	XINERAMA_LIBS=`pkg-config xinerama --libs`
fi
if [ "${XINERAMA_VERSION}" != "" ]; then
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_XINERAMA" ]; then
		HAVE_XINERAMA=`cat ${cache}/ctest-HAVE_XINERAMA`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_XINERAMA`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>
#include <stdio.h>
#include <X11/extensions/Xinerama.h>

int
main(int argc, char *argv[])
{
	XineramaQueryExtension(NULL, NULL, NULL);

	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${XINERAMA_CFLAGS} -o $testdir/conftest conftest.c ${XINERAMA_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${XINERAMA_CFLAGS} -o $testdir/conftest conftest.c ${XINERAMA_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_XINERAMA="yes"
echo "HAVE_XINERAMA=$HAVE_XINERAMA" >>Makefile.config
echo "mdefs[\"HAVE_XINERAMA\"] = \"$HAVE_XINERAMA\"" >>configure.lua
echo "#ifndef HAVE_XINERAMA" > config/have_xinerama.h
echo "#define HAVE_XINERAMA \"$HAVE_XINERAMA\"" >> config/have_xinerama.h
echo "#endif" >> config/have_xinerama.h
echo "hdefs[\"HAVE_XINERAMA\"] = \"$HAVE_XINERAMA\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_XINERAMA="no"
echo "HAVE_XINERAMA=$HAVE_XINERAMA" >>Makefile.config
echo "mdefs[\"HAVE_XINERAMA\"] = \"$HAVE_XINERAMA\"" >>configure.lua
echo "#undef HAVE_XINERAMA" >config/have_xinerama.h
echo "hdefs[\"HAVE_XINERAMA\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_XINERAMA" > ${cache}/ctest-HAVE_XINERAMA
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_XINERAMA
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_XINERAMA}" = "yes" ]; then
echo "XINERAMA_CFLAGS=$XINERAMA_CFLAGS" >>Makefile.config
echo "mdefs[\"XINERAMA_CFLAGS\"] = \"$XINERAMA_CFLAGS\"" >>configure.lua
echo "#ifndef XINERAMA_CFLAGS" > config/xinerama_cflags.h
echo "#define XINERAMA_CFLAGS \"$XINERAMA_CFLAGS\"" >> config/xinerama_cflags.h
echo "#endif" >> config/xinerama_cflags.h
echo "hdefs[\"XINERAMA_CFLAGS\"] = \"$XINERAMA_CFLAGS\"" >>configure.lua
echo "XINERAMA_LIBS=$XINERAMA_LIBS" >>Makefile.config
echo "mdefs[\"XINERAMA_LIBS\"] = \"$XINERAMA_LIBS\"" >>configure.lua
echo "#ifndef XINERAMA_LIBS" > config/xinerama_libs.h
echo "#define XINERAMA_LIBS \"$XINERAMA_LIBS\"" >> config/xinerama_libs.h
echo "#endif" >> config/xinerama_libs.h
echo "hdefs[\"XINERAMA_LIBS\"] = \"$XINERAMA_LIBS\"" >>configure.lua
else
echo "#undef XINERAMA_CFLAGS" >config/xinerama_cflags.h
echo "hdefs[\"XINERAMA_CFLAGS\"] = nil" >>configure.lua
XINERAMA_CFLAGS=""
echo "#undef XINERAMA_LIBS" >config/xinerama_libs.h
echo "hdefs[\"XINERAMA_LIBS\"] = nil" >>configure.lua
XINERAMA_LIBS=""
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_XINERAMA" >config/have_xinerama.h
echo "hdefs[\"HAVE_XINERAMA\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_XINERAMA}" = "yes" ]
 then
CFLAGS="$CFLAGS -DHAVE_XINERAMA"
CXXFLAGS="$CXXFLAGS -DHAVE_XINERAMA"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
	else
		echo "Warning: Xinerama extension not found, disabling support" 1>&2
	fi
fi
if [ "${enable_xrandr}" != "no" ]
 then
$ECHO_N "checking for X11 xrandr extension..."
$ECHO_N "checking for X11 xrandr extension..." >> config.log
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xrandr`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xrandr is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xrandr prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XRANDR_VERSION=`pkg-config xrandr --modversion`
	fi
else
	XRANDR_VERSION=`pkg-config xrandr --modversion`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xrandr`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xrandr is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xrandr prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XRANDR_CFLAGS=`pkg-config xrandr --cflags`
	fi
else
	XRANDR_CFLAGS=`pkg-config xrandr --cflags`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix xrandr`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, xrandr is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct xrandr prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		XRANDR_LIBS=`pkg-config xrandr --libs`
	fi
else
	XRANDR_LIBS=`pkg-config xrandr --libs`
fi
if [ "${XRANDR_VERSION}" != "" ]; then
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_XRANDR" ]; then
		HAVE_XRANDR=`cat ${cache}/ctest-HAVE_XRANDR`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_XRANDR`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>
#include <stdio.h>
#include <X11/extensions/Xrandr.h>

int
main(int argc, char *argv[])
{
	XRRQueryExtension(NULL, NULL, NULL);

	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${XRANDR_CFLAGS} -o $testdir/conftest conftest.c ${XRANDR_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${XRANDR_CFLAGS} -o $testdir/conftest conftest.c ${XRANDR_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_XRANDR="yes"
echo "HAVE_XRANDR=$HAVE_XRANDR" >>Makefile.config
echo "mdefs[\"HAVE_XRANDR\"] = \"$HAVE_XRANDR\"" >>configure.lua
echo "#ifndef HAVE_XRANDR" > config/have_xrandr.h
echo "#define HAVE_XRANDR \"$HAVE_XRANDR\"" >> config/have_xrandr.h
echo "#endif" >> config/have_xrandr.h
echo "hdefs[\"HAVE_XRANDR\"] = \"$HAVE_XRANDR\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_XRANDR="no"
echo "HAVE_XRANDR=$HAVE_XRANDR" >>Makefile.config
echo "mdefs[\"HAVE_XRANDR\"] = \"$HAVE_XRANDR\"" >>configure.lua
echo "#undef HAVE_XRANDR" >config/have_xrandr.h
echo "hdefs[\"HAVE_XRANDR\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_XRANDR" > ${cache}/ctest-HAVE_XRANDR
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_XRANDR
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_XRANDR}" = "yes" ]; then
echo "XRANDR_CFLAGS=$XRANDR_CFLAGS" >>Makefile.config
echo "mdefs[\"XRANDR_CFLAGS\"] = \"$XRANDR_CFLAGS\"" >>configure.lua
echo "#ifndef XRANDR_CFLAGS" > config/xrandr_cflags.h
echo "#define XRANDR_CFLAGS \"$XRANDR_CFLAGS\"" >> config/xrandr_cflags.h
echo "#endif" >> config/xrandr_cflags.h
echo "hdefs[\"XRANDR_CFLAGS\"] = \"$XRANDR_CFLAGS\"" >>configure.lua
echo "XRANDR_LIBS=$XRANDR_LIBS" >>Makefile.config
echo "mdefs[\"XRANDR_LIBS\"] = \"$XRANDR_LIBS\"" >>configure.lua
echo "#ifndef XRANDR_LIBS" > config/xrandr_libs.h
echo "#define XRANDR_LIBS \"$XRANDR_LIBS\"" >> config/xrandr_libs.h
echo "#endif" >> config/xrandr_libs.h
echo "hdefs[\"XRANDR_LIBS\"] = \"$XRANDR_LIBS\"" >>configure.lua
else
echo "#undef XRANDR_CFLAGS" >config/xrandr_cflags.h
echo "hdefs[\"XRANDR_CFLAGS\"] = nil" >>configure.lua
XRANDR_CFLAGS=""
echo "#undef XRANDR_LIBS" >config/xrandr_libs.h
echo "hdefs[\"XRANDR_LIBS\"] = nil" >>configure.lua
XRANDR_LIBS=""
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_XRANDR" >config/have_xrandr.h
echo "hdefs[\"HAVE_XRANDR\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_XRANDR}" = "yes" ]
 then
CFLAGS="$CFLAGS -DHAVE_XRANDR"
CXXFLAGS="$CXXFLAGS -DHAVE_XRANDR"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
	else
		echo "Warning: Xrandr extension not found, disabling support" 1>&2
	fi
fi
if [ "${enable_imlib2}" != "no" ]
 then
$ECHO_N "checking for Imlib2 library (http://docs.enlightenment.org/api/imlib2/html)..."
$ECHO_N "checking for Imlib2 library (http://docs.enlightenment.org/api/imlib2/html)..." >> config.log
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix imlib2`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, imlib2 is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct imlib2 prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		IMLIB2_VERSION=`pkg-config imlib2 --modversion`
	fi
else
	IMLIB2_VERSION=`pkg-config imlib2 --modversion`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix imlib2`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, imlib2 is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct imlib2 prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		IMLIB2_CFLAGS=`pkg-config imlib2 --cflags`
	fi
else
	IMLIB2_CFLAGS=`pkg-config imlib2 --cflags`
fi
if [ "" != "" ]; then
	MK_EXEC_PKGPREFIX=`pkg-config --variable=prefix imlib2`
	if [ "$MK_EXEC_PKGPREFIX" != "" ]; then
		echo " "
		echo "* "
		echo "* ERROR: According to pkg-config, imlib2 is installed in prefix: "
		echo "* $MK_EXEC_PKGPREFIX, but the prefix () was specified."
		echo "* "
		echo "* Please re-run ./configure again with the correct imlib2 prefix"
		echo "* (or specify no prefix at all to enable auto-detection)."
		echo "* "
		exit 1
	else
		IMLIB2_LIBS=`pkg-config imlib2 --libs`
	fi
else
	IMLIB2_LIBS=`pkg-config imlib2 --libs`
fi
if [ "${IMLIB2_VERSION}" != "" ]; then
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_IMLIB2" ]; then
		HAVE_IMLIB2=`cat ${cache}/ctest-HAVE_IMLIB2`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_IMLIB2`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>
#include <stdio.h>
#include <Imlib2.h>

int
main(int argc, char *argv[])
{
	imlib_context_set_display(NULL);

	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${IMLIB2_CFLAGS} -o $testdir/conftest conftest.c ${IMLIB2_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${IMLIB2_CFLAGS} -o $testdir/conftest conftest.c ${IMLIB2_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_IMLIB2="yes"
echo "HAVE_IMLIB2=$HAVE_IMLIB2" >>Makefile.config
echo "mdefs[\"HAVE_IMLIB2\"] = \"$HAVE_IMLIB2\"" >>configure.lua
echo "#ifndef HAVE_IMLIB2" > config/have_imlib2.h
echo "#define HAVE_IMLIB2 \"$HAVE_IMLIB2\"" >> config/have_imlib2.h
echo "#endif" >> config/have_imlib2.h
echo "hdefs[\"HAVE_IMLIB2\"] = \"$HAVE_IMLIB2\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_IMLIB2="no"
echo "HAVE_IMLIB2=$HAVE_IMLIB2" >>Makefile.config
echo "mdefs[\"HAVE_IMLIB2\"] = \"$HAVE_IMLIB2\"" >>configure.lua
echo "#undef HAVE_IMLIB2" >config/have_imlib2.h
echo "hdefs[\"HAVE_IMLIB2\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_IMLIB2" > ${cache}/ctest-HAVE_IMLIB2
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_IMLIB2
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_IMLIB2}" = "yes" ]; then
echo "IMLIB2_CFLAGS=$IMLIB2_CFLAGS" >>Makefile.config
echo "mdefs[\"IMLIB2_CFLAGS\"] = \"$IMLIB2_CFLAGS\"" >>configure.lua
echo "#ifndef IMLIB2_CFLAGS" > config/imlib2_cflags.h
echo "#define IMLIB2_CFLAGS \"$IMLIB2_CFLAGS\"" >> config/imlib2_cflags.h
echo "#endif" >> config/imlib2_cflags.h
echo "hdefs[\"IMLIB2_CFLAGS\"] = \"$IMLIB2_CFLAGS\"" >>configure.lua
echo "IMLIB2_LIBS=$IMLIB2_LIBS" >>Makefile.config
echo "mdefs[\"IMLIB2_LIBS\"] = \"$IMLIB2_LIBS\"" >>configure.lua
echo "#ifndef IMLIB2_LIBS" > config/imlib2_libs.h
echo "#define IMLIB2_LIBS \"$IMLIB2_LIBS\"" >> config/imlib2_libs.h
echo "#endif" >> config/imlib2_libs.h
echo "hdefs[\"IMLIB2_LIBS\"] = \"$IMLIB2_LIBS\"" >>configure.lua
else
echo "#undef IMLIB2_CFLAGS" >config/imlib2_cflags.h
echo "hdefs[\"IMLIB2_CFLAGS\"] = nil" >>configure.lua
IMLIB2_CFLAGS=""
echo "#undef IMLIB2_LIBS" >config/imlib2_libs.h
echo "hdefs[\"IMLIB2_LIBS\"] = nil" >>configure.lua
IMLIB2_LIBS=""
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_IMLIB2" >config/have_imlib2.h
echo "hdefs[\"HAVE_IMLIB2\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_IMLIB2}" = "yes" ]
 then
CFLAGS="$CFLAGS -DHAVE_IMLIB"
CXXFLAGS="$CXXFLAGS -DHAVE_IMLIB"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
	else
		echo "Warning: Imlib2 library not found, disabling support" 1>&2
	fi
fi
echo ""
echo "WMFS build options"
echo "------------------"
echo
echo "XDG directory:	${XDG_CONFIG_DIR}"
echo "Xinerama:	${HAVE_XINERAMA}"
echo "Xrandr:		${HAVE_XRANDR}"
echo "Imlib2:		${HAVE_IMLIB2}"
echo
